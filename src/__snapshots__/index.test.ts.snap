// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Remark-Markdown Web Component renders basic component 1`] = `
<remark-markdown>
  Mark {}
  <slot
    name="content"
  >
    Mark {}
    <script
      type="text/markdown"
    >
      Mark {}
      Mark {}
    </script>
    Mark {}
  </slot>
  <div />
  Mark {}
</remark-markdown>
`;

exports[`Remark-Markdown Web Component renders basic component 2`] = `
<slot name="content">
  <script type="text/markdown">
  </script>
</slot>
<div>
</div>
`;

exports[`Remark-Markdown Web Component renders component and uses provided plugins 1`] = `
<remark-markdown>
  Mark {}
  <script
    slot="content"
    type="text/markdown"
  >
    Mark {}
    
          # Hello world!

          This is a test of inlined markdown!
          
    Mark {}
  </script>
  Mark {}
  Mark {}
  <slot
    name="content"
  >
    Mark {}
    <script
      type="text/markdown"
    >
      Mark {}
      Mark {}
    </script>
    Mark {}
  </slot>
  <div />
  Mark {}
</remark-markdown>
`;

exports[`Remark-Markdown Web Component renders component and uses provided plugins 2`] = `
<script slot="content"
        type="text/markdown"
>
  # Hello world!

          This is a test of inlined markdown!
</script>
<slot name="content">
  <script type="text/markdown">
  </script>
</slot>
<div>
</div>
`;

exports[`Remark-Markdown Web Component renders component with \`src\` parameter 1`] = `
<remark-markdown
  src="https://raw.github.com/adamschwartz/github-markdown-kitchen-sink/master/README.md"
>
  Mark {}
  <slot
    name="content"
  >
    Mark {}
    <script
      type="text/markdown"
    >
      Mark {}
      Mark {}
    </script>
    Mark {}
  </slot>
  <h1>
    Mark {}
    Test
    Mark {}
  </h1>
  Mark {}
</remark-markdown>
`;

exports[`Remark-Markdown Web Component renders component with \`src\` parameter 2`] = `
<slot name="content">
  <script type="text/markdown">
  </script>
</slot>
<h1>
  Test
</h1>
`;

exports[`Remark-Markdown Web Component renders component with inlined Markdown 1`] = `
<remark-markdown>
  Mark {}
  <script
    slot="content"
    type="text/markdown"
  >
    Mark {}
    
          # Hello world!

          This is a test of inlined markdown!
          
    Mark {}
  </script>
  Mark {}
  Mark {}
  <slot
    name="content"
  >
    Mark {}
    <script
      type="text/markdown"
    >
      Mark {}
      Mark {}
    </script>
    Mark {}
  </slot>
  <div />
  Mark {}
</remark-markdown>
`;

exports[`Remark-Markdown Web Component renders component with inlined Markdown 2`] = `
<script slot="content"
        type="text/markdown"
>
  # Hello world!

          This is a test of inlined markdown!
</script>
<slot name="content">
  <script type="text/markdown">
  </script>
</slot>
<div>
</div>
`;

exports[`Remark-Markdown Web Component renders empty document if inline script does not contain content 1`] = `
<remark-markdown>
  Mark {}
  <script
    slot="content"
    type="text/markdown"
  />
  Mark {}
  Mark {}
  <slot
    name="content"
  >
    Mark {}
    <script
      type="text/markdown"
    >
      Mark {}
      Mark {}
    </script>
    Mark {}
  </slot>
  <div />
  Mark {}
</remark-markdown>
`;

exports[`Remark-Markdown Web Component renders empty document if inline script does not contain content 2`] = `
<script slot="content"
        type="text/markdown"
>
</script>
<slot name="content">
  <script type="text/markdown">
  </script>
</slot>
<div>
</div>
`;
